// –§–∞–π–ª: app/questions/[slug]/page.js

import { notFound } from "next/navigation";
import {
  questionsService,
  answersService,
  commentsService,
} from "@/src/services/server";
import { getServerUser } from "@/src/lib/serverUtils";
import QuestionDetailPage from "@/src/features/QuestionDetailPage/QuestionDetailPage";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è SEO
export async function generateMetadata({ params }) {
  const { slug } = await params;

  try {
    const question = await questionsService.getById(slug);

    if (!question) {
      return {
        title: "Ot√°zka nen√°jden√° | FastCredit Forum",
        description: "Po≈æadovan√° ot√°zka nebola n√°jden√°.",
      };
    }

    // –ü–µ—Ä–≤—ã–µ 160 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è description
    const description = question.content
      ? question.content.replace(/<[^>]*>/g, "").substring(0, 160) + "..."
      : "Finanƒçn√° ot√°zka na FastCredit f√≥re";

    return {
      title: `${question.title} | FastCredit Forum`,
      description,
      keywords: `${question.title}, finanƒçn√© poradenstvo, ${question.category}, FastCredit`,
      openGraph: {
        title: question.title,
        description,
        type: "article",
        siteName: "FastCredit Forum",
        images: [
          {
            url: "/og-question.jpg", // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
            width: 1200,
            height: 630,
            alt: question.title,
          },
        ],
      },
      twitter: {
        card: "summary_large_image",
        title: question.title,
        description,
      },
      // Schema.org QAPage markup
      other: {
        "application/ld+json": JSON.stringify({
          "@context": "https://schema.org",
          "@type": "QAPage",
          mainEntity: {
            "@type": "Question",
            name: question.title,
            text: question.content,
            answerCount: question.answersCount || 0,
            author: {
              "@type": "Person",
              name:
                question.author?.firstName ||
                question.author?.username ||
                "Anonym",
            },
            dateCreated: question.createdAt,
            acceptedAnswer: question.bestAnswer
              ? {
                  "@type": "Answer",
                  text: question.bestAnswer.content,
                  author: {
                    "@type": "Person",
                    name: question.bestAnswer.author?.firstName || "Expert",
                  },
                }
              : undefined,
          },
        }),
      },
    };
  } catch (error) {
    console.error("Error generating metadata:", error);
    return {
      title: "FastCredit Forum",
      description: "Finanƒçn√© poradenstvo a odpovede od expertov",
    };
  }
}

export default async function QuestionPage({ params }) {
  const { slug } = await params;

  console.log("üîç Loading question:", slug);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await getServerUser();
  console.log("üë§ Current user:", user ? `${user.role} (${user.id})` : "Guest");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  let question = null;
  let answers = [];
  let comments = [];
  let similarQuestions = [];
  let error = null;

  try {
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
    console.log("üìã Loading question data...");
    question = await questionsService.getById(slug);

    if (!question) {
      console.log("‚ùå Question not found");
      notFound();
    }

    console.log("‚úÖ Question loaded:", question.title);

    // 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    const TIMEOUT = 15000; // 15 —Å–µ–∫—É–Ω–¥ timeout

    const answersPromise = Promise.race([
      answersService.getAnswersForQuestion(question._id || question.id),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("Answers timeout")), TIMEOUT)
      ),
    ]);

    const similarPromise = Promise.race([
      questionsService.getSimilar(question._id || question.id, 5),
      new Promise((_, reject) =>
        setTimeout(
          () => reject(new Error("Similar questions timeout")),
          TIMEOUT
        )
      ),
    ]);

    const [answersResult, similarResult] = await Promise.allSettled([
      answersPromise,
      similarPromise,
    ]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    if (answersResult.status === "fulfilled") {
      answers = Array.isArray(answersResult.value)
        ? answersResult.value
        : answersResult.value?.items || [];
      console.log("‚úÖ Answers loaded:", answers.length, "items");
    } else {
      console.error(
        "‚ùå Failed to load answers:",
        answersResult.reason?.message
      );
      answers = [];
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if (similarResult.status === "fulfilled") {
      similarQuestions = Array.isArray(similarResult.value)
        ? similarResult.value
        : similarResult.value?.items || [];
      console.log(
        "‚úÖ Similar questions loaded:",
        similarQuestions.length,
        "items"
      );
    } else {
      console.error(
        "‚ùå Failed to load similar questions:",
        similarResult.reason?.message
      );
      similarQuestions = [];
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const canUserComment = checkCommentPermissions(user, question, answers);
    const shouldLoadComments = canUserComment || answers.length > 0;

    console.log("üîê Comment permissions:", {
      canUserComment,
      shouldLoadComments,
      userRole: user?.role,
      answersCount: answers.length,
      hasExpertAnswers: answers.some((a) => a.author?.role === "expert"),
    });

    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (shouldLoadComments) {
      try {
        console.log("üí¨ Loading comments...");
        const commentsPromise = Promise.race([
          commentsService.getComments(question._id || question.id),
          new Promise((_, reject) =>
            setTimeout(() => reject(new Error("Comments timeout")), TIMEOUT)
          ),
        ]);

        const commentsData = await commentsPromise;
        comments = Array.isArray(commentsData)
          ? commentsData
          : commentsData?.items || [];
        console.log("‚úÖ Comments loaded:", comments.length, "items");
      } catch (commentsError) {
        console.error("‚ùå Failed to load comments:", commentsError.message);
        comments = [];
      }
    } else {
      console.log("üö´ Comments not loaded - no permission or no answers");
    }
  } catch (err) {
    console.error("üí• Critical error loading question:", err);

    if (err.message?.includes("404") || err.status === 404) {
      notFound();
    }

    error = "Chyba pri naƒç√≠tan√≠ ot√°zky. Sk√∫ste obnovi≈• str√°nku.";
  }

  // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  if (!question) {
    console.log("‚ùå No question data after processing");
    notFound();
  }

  // 6. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const pageData = {
    question,
    answers,
    comments,
    similarQuestions,
    user,
    permissions: {
      canComment: checkCommentPermissions(user, question, answers),
      canAnswer: canUserAnswer(user),
      canEdit: canUserEdit(user, question),
      canDelete: canUserDelete(user, question),
      canAcceptAnswer: canUserAcceptAnswer(user, question),
      canModerate: canUserModerate(user),
    },
    error,
  };

  console.log("üìä Final page data:", {
    questionId: question._id || question.id,
    answersCount: answers.length,
    commentsCount: comments.length,
    similarCount: similarQuestions.length,
    permissions: pageData.permissions,
    hasError: !!error,
  });

  return <QuestionDetailPage {...pageData} />;
}

// === UTILITY FUNCTIONS ===

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
 * –ö–õ–Æ–ß–ï–í–ê–Ø –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
 */
function checkCommentPermissions(user, question, answers) {
  if (!user) return false;

  // –≠–∫—Å–ø–µ—Ä—Ç—ã –∏ –∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
  if (user.role === "expert" || user.role === "admin") {
    return true;
  }

  // –ê–≤—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
  if (user._id === question.author?._id || user._id === question.author) {
    return true;
  }

  // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
  const hasExpertAnswer = answers.some(
    (answer) => answer.author?.role === "expert" && answer.status === "approved"
  );

  return hasExpertAnswer;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
 */
function canUserAnswer(user) {
  if (!user) return false;
  return user.role === "expert" || user.role === "admin";
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
 */
function canUserEdit(user, question) {
  if (!user || !question) return false;

  // –ê–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
  const isAuthor =
    user._id === question.author?._id || user._id === question.author;
  if (isAuthor) {
    const createdAt = new Date(question.createdAt);
    const now = new Date();
    const hoursDiff = (now - createdAt) / (1000 * 60 * 60);
    return hoursDiff <= 24;
  }

  // –ê–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
  return user.role === "admin";
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å
 */
function canUserDelete(user, question) {
  if (!user || !question) return false;

  // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä (–≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞) –∏–ª–∏ –∞–¥–º–∏–Ω
  const isAuthor =
    user._id === question.author?._id || user._id === question.author;
  if (isAuthor) {
    const createdAt = new Date(question.createdAt);
    const now = new Date();
    const hoursDiff = (now - createdAt) / (1000 * 60 * 60);
    return hoursDiff <= 1 && !question.hasAnswers;
  }

  return user.role === "admin";
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –ª—É—á—à–∏–µ
 */
function canUserAcceptAnswer(user, question) {
  if (!user || !question) return false;

  // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∞–¥–º–∏–Ω
  const isAuthor =
    user._id === question.author?._id || user._id === question.author;
  return isAuthor || user.role === "admin";
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
 */
function canUserModerate(user) {
  if (!user) return false;
  return user.role === "admin" || user.role === "moderator";
}
