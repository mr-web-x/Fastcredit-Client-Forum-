// –§–∞–π–ª: app/questions/page.js

import { questionsService, categoriesService } from "@/src/services/server";
import QuestionsListPage from "@/src/features/QuestionsListPage/QuestionsListPage";

export const metadata = {
  title: "V≈°etky ot√°zky | FastCredit Forum",
  description:
    "Prehliadajte v≈°etky ot√°zky na FastCredit f√≥re. N√°jdite odpovede na finanƒçn√© ot√°zky od expertov.",
  keywords:
    "ot√°zky, finanƒçn√© poradenstvo, FastCredit, f√≥rum, experti, p√¥≈æiƒçky, banky",
};

export default async function QuestionsPage({ searchParams }) {
  // ƒå√≠tame search parametre pre filtrovanie a pagin√°ciu
  const params = await searchParams;

  const page = parseInt(params.page) || 1;
  const limit = 20; // Podƒæa –¢–ó - 20 ot√°zok na str√°nku
  const category = params.category || "";
  const status = params.status || "";
  const period = params.period || "";
  const priority = params.priority || "";
  const sortBy = params.sortBy || "createdAt";
  const sortOrder = params.sortOrder || "-1";

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log("üîç Filter params:", {
    category,
    status,
    period,
    priority,
    sortBy,
  });

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è backend
  let backendStatus = status;
  if (status === "unanswered") {
    // Backend –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    backendStatus = "pending"; // –∏–ª–∏ "open", –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "unanswered"
  } else if (status === "answered") {
    backendStatus = "answered";
  } else if (status === "closed") {
    backendStatus = "closed";
  }

  // –£–ª—É—á—à–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ sortBy –¥–ª—è backend
  let backendSortBy = sortBy;
  let backendSortOrder = sortOrder;

  switch (sortBy) {
    case "popular":
      backendSortBy = "likes";
      backendSortOrder = "-1"; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é –ª–∞–π–∫–æ–≤
      break;
    case "answers":
      backendSortBy = "answersCount";
      backendSortOrder = "-1"; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
      break;
    case "createdAt":
    default:
      backendSortBy = "createdAt";
      backendSortOrder = "-1"; // –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
      break;
  }

  // Priprav√≠me parametre pre API
  const apiParams = {
    page,
    limit,
    sortBy: backendSortBy,
    sortOrder: backendSortOrder,
  };

  // Prid√°me filtere len ak s√∫ nastaven√©
  if (category) {
    apiParams.category = category;
    console.log("üìÇ Category filter:", category);
  }

  if (backendStatus) {
    apiParams.status = backendStatus;
    console.log("üìä Status filter:", backendStatus, "(original:", status, ")");
  }

  if (priority) {
    apiParams.priority = priority;
    console.log("‚ö° Priority filter:", priority);
  }

  // Pre period filter - prepoƒç√≠tame na d√°tumy
  if (period) {
    const now = new Date();
    let fromDate;

    switch (period) {
      case "day":
        fromDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        break;
      case "week":
        fromDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case "month":
        fromDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        break;
      default:
        fromDate = null;
    }

    if (fromDate) {
      apiParams.fromDate = fromDate.toISOString();
      console.log("üìÖ Period filter:", period, "->", fromDate.toISOString());
    }
  }

  console.log("üöÄ Final API params:", apiParams);

  // Naƒç√≠tame d√°ta zo servera
  let questionsData = { items: [], pagination: null };
  let categories = [];
  let error = null;

  try {
    // Paralelne naƒç√≠tame ot√°zky a kateg√≥rie s timeout
    const TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥

    const questionsPromise = Promise.race([
      questionsService.getLatest(apiParams),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("API timeout - questions")), TIMEOUT)
      ),
    ]);

    const categoriesPromise = Promise.race([
      categoriesService.getAll(true), // s ≈°tatistikami
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("API timeout - categories")), TIMEOUT)
      ),
    ]);

    const [questionsResult, categoriesResult] = await Promise.allSettled([
      questionsPromise,
      categoriesPromise,
    ]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if (questionsResult.status === "fulfilled") {
      questionsData = questionsResult.value;
      console.log(
        "‚úÖ Questions loaded:",
        questionsData.items?.length || 0,
        "items"
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!questionsData.items) {
        console.warn("‚ö†Ô∏è No items in questionsData:", questionsData);
        questionsData = { items: [], pagination: null };
      }
    } else {
      console.error("‚ùå Failed to load questions:", questionsResult.reason);

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      const errorMsg = questionsResult.reason?.message || "Unknown error";
      if (errorMsg.includes("timeout")) {
        error = "Naƒç√≠tavanie ot√°zok trv√° pr√≠li≈° dlho. Sk√∫ste to znovu.";
      } else if (errorMsg.includes("404")) {
        error = "API endpoint pre ot√°zky nebol n√°jden√Ω.";
      } else if (errorMsg.includes("500")) {
        error = "Chyba servera pri naƒç√≠tavan√≠ ot√°zok.";
      } else {
        error = "Nepodarilo sa naƒç√≠ta≈• ot√°zky. Sk√∫ste to znovu.";
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categoriesResult.status === "fulfilled") {
      categories = categoriesResult.value;
      console.log("‚úÖ Categories loaded:", categories?.length || 0, "items");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (!Array.isArray(categories)) {
        console.warn("‚ö†Ô∏è Categories is not array:", categories);
        categories = [];
      }
    } else {
      console.error("‚ùå Failed to load categories:", categoriesResult.reason);
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ–∑ –Ω–∏—Ö
      categories = [];
    }
  } catch (err) {
    console.error("üí• Unexpected error loading page data:", err);
    error = "Neoƒçak√°van√° chyba pri naƒç√≠tan√≠ d√°t. Obnovte str√°nku.";
  }

  // Priprav√≠me filter options pre frontend
  const filterOptions = {
    categories: categories.map((cat) => ({
      value: cat.slug,
      label: cat.name,
      count: cat.questionsCount || 0,
    })),
    statuses: [
      { value: "", label: "V≈°etky", count: null },
      { value: "unanswered", label: "Bez odpoved√≠", count: null },
      { value: "answered", label: "Zodpovedan√©", count: null },
      { value: "closed", label: "Uzavret√©", count: null },
    ],
    periods: [
      { value: "", label: "V≈°etky" },
      { value: "day", label: "Za de≈à" },
      { value: "week", label: "Za t√Ω≈æde≈à" },
      { value: "month", label: "Za mesiac" },
    ],
    sortOptions: [
      { value: "createdAt", label: "Najnov≈°ie" },
      { value: "popular", label: "Najpopul√°rnej≈°ie" },
      { value: "answers", label: "Najviac odpoved√≠" },
    ],
  };

  // Aktu√°lne filtre pre frontend (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
  const currentFilters = {
    category,
    status, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ backend
    period,
    sortBy,
    sortOrder,
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
  console.log("üìä Final state:", {
    questionsCount: questionsData.items?.length || 0,
    pagination: questionsData.pagination,
    categoriesCount: categories.length,
    currentFilters,
    hasError: !!error,
  });

  return (
    <QuestionsListPage
      questions={questionsData.items || []}
      pagination={questionsData.pagination}
      filterOptions={filterOptions}
      currentFilters={currentFilters}
      error={error}
    />
  );
}
