// –§–∞–π–ª: app/questions/page.js

import { questionsService, categoriesService } from "@/src/services/server";
import QuestionsListPage from "@/src/features/QuestionsListPage/QuestionsListPage";

export const metadata = {
  title: "V≈°etky ot√°zky | FastCredit Forum",
  description:
    "Prehliadajte v≈°etky ot√°zky na FastCredit f√≥re. N√°jdite odpovede na finanƒçn√© ot√°zky od expertov.",
  keywords:
    "ot√°zky, finanƒçn√© poradenstvo, FastCredit, f√≥rum, experti, p√¥≈æiƒçky, banky",
};

export default async function QuestionsPage({ searchParams }) {
  // –ß–∏—Ç–∞–µ–º search –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const params = await searchParams;

  const apiParams = {
    page: parseInt(params.page) || 1,
    limit: 20,
    category: params.category || null,
    priority: params.priority || null,
    sortBy: params.sortBy || "createdAt",
    sortOrder: parseInt(params.sortOrder) || -1,
    search: params.search || null,
    status: "answered", // –í—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ period - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ fromDate
  if (params.period) {
    const now = new Date();
    let fromDate;

    switch (params.period) {
      case "day":
        fromDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        break;
      case "week":
        fromDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case "month":
        fromDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        break;
    }

    if (fromDate) {
      apiParams.fromDate = fromDate.toISOString();
    }
  }

  // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
  Object.keys(apiParams).forEach((key) => {
    if (apiParams[key] === null) {
      delete apiParams[key];
    }
  });

  console.log("üöÄ Final API params:", apiParams);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
  let questionsData = { items: [], pagination: null };
  let categories = [];
  let error = null;

  try {
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å timeout
    const TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥

    const questionsPromise = Promise.race([
      questionsService.getLatest(apiParams),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("API timeout - questions")), TIMEOUT)
      ),
    ]);

    const categoriesPromise = Promise.race([
      categoriesService.getAll(true), // —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("API timeout - categories")), TIMEOUT)
      ),
    ]);

    const [questionsResult, categoriesResult] = await Promise.allSettled([
      questionsPromise,
      categoriesPromise,
    ]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if (questionsResult.status === "fulfilled") {
      questionsData = questionsResult.value;
      console.log(
        "‚úÖ Questions loaded:",
        questionsData.items?.length || 0,
        "items"
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!questionsData.items) {
        console.warn("‚ö†Ô∏è No items in questionsData:", questionsData);
        questionsData = { items: [], pagination: null };
      }
    } else {
      console.error("‚ùå Failed to load questions:", questionsResult.reason);

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      const errorMsg = questionsResult.reason?.message || "Unknown error";
      if (errorMsg.includes("timeout")) {
        error = "Naƒç√≠tavanie ot√°zok trv√° pr√≠li≈° dlho. Sk√∫ste to znovu.";
      } else if (errorMsg.includes("404")) {
        error = "API endpoint pre ot√°zky nebol n√°jden√Ω.";
      } else if (errorMsg.includes("500")) {
        error = "Chyba servera pri naƒç√≠tavan√≠ ot√°zok.";
      } else {
        error = "Nepodarilo sa naƒç√≠ta≈• ot√°zky. Sk√∫ste to znovu.";
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categoriesResult.status === "fulfilled") {
      categories = categoriesResult.value;
      console.log("‚úÖ Categories loaded:", categories?.length || 0, "items");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (!Array.isArray(categories)) {
        console.warn("‚ö†Ô∏è Categories is not array:", categories);
        categories = [];
      }
    } else {
      console.error("‚ùå Failed to load categories:", categoriesResult.reason);
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ–∑ –Ω–∏—Ö
      categories = [];
    }
  } catch (err) {
    console.error("üí• Unexpected error loading page data:", err);
    error = "Neoƒçak√°van√° chyba pri naƒç√≠tan√≠ d√°t. Obnovte str√°nku.";
  }

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º filter options –¥–ª—è frontend (–±–µ–∑ —Å—Ç–∞—Ç—É—Å–æ–≤)
  const filterOptions = {
    categories: categories.map((cat) => ({
      value: cat.slug,
      label: cat.name,
      count: cat.questionsCount || 0,
    })),
    periods: [
      { value: "", label: "V≈°etky" },
      { value: "day", label: "Za de≈à" },
      { value: "week", label: "Za t√Ω≈æde≈à" },
      { value: "month", label: "Za mesiac" },
    ],
    sortOptions: [
      { value: "createdAt", label: "Najnov≈°ie" },
      { value: "views", label: "Najviac zobrazen√≠" },
      { value: "answersCount", label: "Najviac odpoved√≠" },
    ],
  };

  // –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è frontend (–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞)
  const currentFilters = {
    category: params.category || "",
    period: params.period || "",
    sortBy: params.sortBy || "createdAt",
    sortOrder: params.sortOrder || "-1",
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
  console.log("üìä Final state:", {
    questionsCount: questionsData.items?.length || 0,
    pagination: questionsData.pagination,
    categoriesCount: categories.length,
    currentFilters,
    hasError: !!error,
  });

  return (
    <QuestionsListPage
      questions={questionsData.items || []}
      pagination={questionsData.pagination}
      filterOptions={filterOptions}
      currentFilters={currentFilters}
      error={error}
    />
  );
}
