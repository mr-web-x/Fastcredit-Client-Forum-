// –§–∞–π–ª: app/actions/users.js

"use server";

import { revalidatePath } from "next/cache";
import { getServerUser } from "@/src/lib/auth-server";
import { usersService } from "@/src/services/server";

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function getUsersAction(params = {}) {
  try {
    const user = await getServerUser();
    if (!user || user.role !== "admin") {
      return {
        success: false,
        error: "Nem√°te opr√°vnenie na t√∫to akciu",
        data: null,
      };
    }

    const {
      page = 1,
      limit = 20,
      role = "",
      isActive = "",
      search = "",
      sortBy = "createdAt",
    } = params;

    console.log(`üîç Loading users for admin ${user.id}:`, {
      page,
      limit,
      role,
      isActive,
      search,
      sortBy,
    });

    const result = await usersService.getAllUsers({
      page,
      limit,
      role,
      isActive,
      search,
      sortBy,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    const responseData = {
      items: Array.isArray(result.data) ? result.data : result.users || [],
      pagination: result.pagination || {
        page,
        totalPages: Math.ceil((result.total || 0) / limit),
        totalItems: result.total || 0,
        hasNext: false,
        hasPrev: false,
      },
    };

    console.log(`‚úÖ Users loaded:`, {
      itemsCount: responseData.items?.length || 0,
      pagination: responseData.pagination,
    });

    return {
      success: true,
      data: responseData,
      error: null,
    };
  } catch (error) {
    console.error("‚ùå Failed to load users:", error);
    return {
      success: false,
      error: "Nepodarilo sa naƒç√≠ta≈• pou≈æ√≠vateƒæov. Sk√∫ste to znovu.",
      data: null,
    };
  }
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function searchUsersAction(params = {}) {
  try {
    const user = await getServerUser();
    if (!user || user.role !== "admin") {
      return {
        success: false,
        error: "Nem√°te opr√°vnenie na t√∫to akciu",
      };
    }

    const { q, page = 1, limit = 10 } = params;

    const result = await usersService.searchUsers({ q, page, limit });

    return {
      success: true,
      data: {
        items: result.data || [],
        pagination: result.pagination,
      },
    };
  } catch (error) {
    console.error("‚ùå Failed to search users:", error);
    return {
      success: false,
      error: "Nepodarilo sa vyhƒæada≈• pou≈æ√≠vateƒæov",
    };
  }
}

/**
 * –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function changeUserRoleAction(userId, role, reason = "") {
  try {
    const user = await getServerUser();
    if (!user || user.role !== "admin") {
      return {
        success: false,
        error: "Nem√°te opr√°vnenie na t√∫to akciu",
      };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
    const validRoles = ["user", "expert", "lawyer", "admin"];
    if (!validRoles.includes(role)) {
      return {
        success: false,
        error: "Neplatn√° rola",
      };
    }

    // –ù–µ–ª—å–∑—è —Å–µ–±–µ –º–µ–Ω—è—Ç—å —Ä–æ–ª—å
    if (user.id === userId || user._id === userId) {
      return {
        success: false,
        error: "Nem√¥≈æete zmeni≈• svoju vlastn√∫ rolu",
      };
    }

    console.log(`üîÑ Changing user role:`, {
      adminId: user.id,
      targetUserId: userId,
      role,
      reason,
    });

    await usersService.changeUserRole(userId, role, reason);

    console.log(`‚úÖ User role changed successfully`);

    // Revalidate —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
    revalidatePath("/profile/users");
    revalidatePath("/", "layout"); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    return {
      success: true,
      message: `Rola pou≈æ√≠vateƒæa bola √∫spe≈°ne zmenen√° na "${role}"`,
      error: null,
    };
  } catch (error) {
    console.error("‚ùå Failed to change user role:", error);

    if (error.message?.includes("not found")) {
      return {
        success: false,
        error: "Pou≈æ√≠vateƒæ nebol n√°jden√Ω",
      };
    }

    if (error.message?.includes("forbidden")) {
      return {
        success: false,
        error: "Nem√°te opr√°vnenie zmeni≈• rolu tomuto pou≈æ√≠vateƒæovi",
      };
    }

    return {
      success: false,
      error: "Nepodarilo sa zmeni≈• rolu pou≈æ√≠vateƒæa",
    };
  }
}

/**
 * –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function banUserAction(userId, banData = {}) {
  try {
    const user = await getServerUser();
    if (!user || user.role !== "admin") {
      return {
        success: false,
        error: "Nem√°te opr√°vnenie na t√∫to akciu",
      };
    }

    // –ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å —Å–µ–±—è
    if (user.id === userId || user._id === userId) {
      return {
        success: false,
        error: "Nem√¥≈æete zablokova≈• seba",
      };
    }

    const {
      reason = "Poru≈°enie pravidiel komunity",
      duration = 7,
      isPermanent = false,
    } = banData;

    console.log(`üö´ Banning user:`, {
      adminId: user.id,
      targetUserId: userId,
      reason,
      duration,
      isPermanent,
    });

    await usersService.banUser(userId, {
      reason,
      duration,
      isPermanent,
    });

    console.log(`‚úÖ User banned successfully`);

    // Revalidate —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    revalidatePath("/profile/users");
    revalidatePath("/", "layout");

    return {
      success: true,
      message: isPermanent
        ? "Pou≈æ√≠vateƒæ bol trvale zablokovan√Ω"
        : `Pou≈æ√≠vateƒæ bol zablokovan√Ω na ${duration} dn√≠`,
      error: null,
    };
  } catch (error) {
    console.error("‚ùå Failed to ban user:", error);

    if (error.message?.includes("not found")) {
      return {
        success: false,
        error: "Pou≈æ√≠vateƒæ nebol n√°jden√Ω",
      };
    }

    return {
      success: false,
      error: "Nepodarilo sa zablokova≈• pou≈æ√≠vateƒæa",
    };
  }
}

/**
 * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function unbanUserAction(userId) {
  try {
    const user = await getServerUser();
    if (!user || user.role !== "admin") {
      return {
        success: false,
        error: "Nem√°te opr√°vnenie na t√∫to akciu",
      };
    }

    console.log(`‚úÖ Unbanning user:`, {
      adminId: user.id,
      targetUserId: userId,
    });

    await usersService.unbanUser(userId);

    console.log(`‚úÖ User unbanned successfully`);

    // Revalidate —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    revalidatePath("/profile/users");
    revalidatePath("/", "layout");

    return {
      success: true,
      message: "Pou≈æ√≠vateƒæ bol √∫spe≈°ne odblokovan√Ω",
      error: null,
    };
  } catch (error) {
    console.error("‚ùå Failed to unban user:", error);

    if (error.message?.includes("not found")) {
      return {
        success: false,
        error: "Pou≈æ√≠vateƒæ nebol n√°jden√Ω",
      };
    }

    return {
      success: false,
      error: "Nepodarilo sa odblokova≈• pou≈æ√≠vateƒæa",
    };
  }
}
