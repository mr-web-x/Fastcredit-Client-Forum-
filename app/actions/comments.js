// –§–∞–π–ª: app/actions/comments.js
"use server";

import { revalidatePath } from "next/cache";
import { getServerUser } from "@/src/lib/auth-server";

/**
 * Server Action –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É
 */
export async function createCommentAction(questionId, commentData) {
  try {
    const currentUser = await getServerUser();
    if (!currentUser) {
      return {
        success: false,
        error: "Mus√≠te sa prihl√°si≈• pre pridanie koment√°ra",
      };
    }

    if (!questionId) {
      throw new Error("ID ot√°zky je povinn√©");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const { content, parentComment = null } = commentData;

    if (!content || content.trim().length < 5) {
      return {
        success: false,
        error: "Koment√°r mus√≠ ma≈• aspo≈à 5 znakov",
      };
    }

    if (content.length > 1000) {
      return {
        success: false,
        error: "Koment√°r m√¥≈æe ma≈• maxim√°lne 1000 znakov",
      };
    }

    console.log(`üí¨ Creating comment:`, {
      questionId,
      userId: currentUser.id,
      parentComment,
      contentLength: content.length,
    });

    const backendUrl =
      process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001/api";
    const { cookies } = await import("next/headers");
    const cookieStore = await cookies();
    const jwtCookie = cookieStore.get("fc_jwt");

    if (!jwtCookie?.value) {
      return {
        success: false,
        error: "No authentication token",
      };
    }

    const response = await fetch(
      `${backendUrl}/questions/${questionId}/comments`,
      {
        method: "POST",
        headers: {
          Cookie: `fc_jwt=${jwtCookie.value}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: content.trim(),
          parentComment,
        }),
      }
    );

    const data = await response.json();

    if (!response.ok || !data.success) {
      console.error("‚ùå Failed to create comment:", data.message);

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (response.status === 403) {
        return {
          success: false,
          error: data.message || "Nem√°te opr√°vnenie pre pridanie koment√°ra",
        };
      }

      return {
        success: false,
        error: data.message || "Nepodarilo sa prida≈• koment√°r",
      };
    }

    console.log(`‚úÖ Comment created successfully:`, data.data._id);

    // Revalidate —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–æ–º
    revalidatePath("/questions/[slug]", "page");

    return {
      success: true,
      data: data.data,
      message: "Koment√°r bol √∫spe≈°ne pridan√Ω",
    };
  } catch (error) {
    console.error("‚ùå [createCommentAction] Error:", error);
    return {
      success: false,
      error: "Chyba servera pri prid√°van√≠ koment√°ra",
    };
  }
}

/**
 * Server Action –¥–ª—è –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
export async function likeCommentAction(commentId) {
  try {
    const currentUser = await getServerUser();
    if (!currentUser) {
      return {
        success: false,
        error: "Mus√≠te sa prihl√°si≈• pre hodnotenie koment√°ra",
      };
    }

    if (!commentId) {
      throw new Error("ID koment√°ra je povinn√©");
    }

    console.log(`üëç Liking comment:`, {
      commentId,
      userId: currentUser.id,
    });

    const backendUrl =
      process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001/api";
    const { cookies } = await import("next/headers");
    const cookieStore = await cookies();
    const jwtCookie = cookieStore.get("fc_jwt");

    if (!jwtCookie?.value) {
      return {
        success: false,
        error: "No authentication token",
      };
    }

    const response = await fetch(`${backendUrl}/comments/${commentId}/like`, {
      method: "POST",
      headers: {
        Cookie: `fc_jwt=${jwtCookie.value}`,
        "Content-Type": "application/json",
      },
    });

    const data = await response.json();

    if (!response.ok || !data.success) {
      console.error("‚ùå Failed to like comment:", data.message);
      return {
        success: false,
        error: data.message || "Nepodarilo sa oznaƒçi≈• koment√°r",
      };
    }

    console.log(`‚úÖ Comment liked successfully:`, data.data);

    // Revalidate —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–æ–º
    revalidatePath("/questions/[slug]", "page");

    return {
      success: true,
      data: {
        likes: data.data.likes,
        isLiked: data.data.isLiked,
      },
    };
  } catch (error) {
    console.error("‚ùå [likeCommentAction] Error:", error);
    return {
      success: false,
      error: "Chyba servera pri hodnoten√≠ koment√°ra",
    };
  }
}

/**
 * Server Action –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
export async function deleteCommentAction(commentId) {
  try {
    const currentUser = await getServerUser();
    if (!currentUser) {
      return {
        success: false,
        error: "Mus√≠te sa prihl√°si≈• pre zmazanie koment√°ra",
      };
    }

    if (!commentId) {
      throw new Error("ID koment√°ra je povinn√©");
    }

    console.log(`üóëÔ∏è Deleting comment:`, {
      commentId,
      userId: currentUser.id,
    });

    const backendUrl =
      process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001/api";
    const { cookies } = await import("next/headers");
    const cookieStore = await cookies();
    const jwtCookie = cookieStore.get("fc_jwt");

    if (!jwtCookie?.value) {
      return {
        success: false,
        error: "No authentication token",
      };
    }

    const response = await fetch(`${backendUrl}/comments/${commentId}`, {
      method: "DELETE",
      headers: {
        Cookie: `fc_jwt=${jwtCookie.value}`,
        "Content-Type": "application/json",
      },
    });

    const data = await response.json();

    if (!response.ok || !data.success) {
      console.error("‚ùå Failed to delete comment:", data.message);
      return {
        success: false,
        error: data.message || "Nepodarilo sa zmaza≈• koment√°r",
      };
    }

    console.log(`‚úÖ Comment deleted successfully`);

    // Revalidate —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–æ–º
    revalidatePath("/questions/[slug]", "page");

    return {
      success: true,
      message: "Koment√°r bol √∫spe≈°ne zmazan√Ω",
    };
  } catch (error) {
    console.error("‚ùå [deleteCommentAction] Error:", error);
    return {
      success: false,
      error: "Chyba servera pri mazan√≠ koment√°ra",
    };
  }
}
